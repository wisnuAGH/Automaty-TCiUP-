// definicja wejścia wyjścia
module seq_detector(
	input clk,
  	input rst_n,
   	input seq_i,
    output reg detect_o
	);
  
  // definicja wielkości operatora
  
  reg [2:0] current_state, next_state;
  
  localparam 	S0 = 3'b001,
  				S1 = 3'b010,
  				S2 = 3'b100;
  
  // definicja kolejych zmian automatu
  
  always @(posedge clk or negedge rst_n)
    if (!rst_n) begin
      current_state <= S0;
    end else begin
      current_state <= next_state;
    end
  
  // mechanizm zmiany automatu
  
  always @(*)
    case(current_state)
      S0: if(seq_i == 0) next_state <= S1; else next_state <= S0;
      S1: if(seq_i == 0) next_state <= S2; else next_state <= S0;
      S2: if(seq_i == 0) next_state <= S1; else next_state <= S0;
    default: next_state <= S0;
    endcase
  
  // stan wyjściowy
  
  always @(posedge clk or negedge rst_n) begin
    if(!rst_n)
      detect_o <= 1'b0;
    else
      case(current_state)
        S0, S1: detect_o <= 1'b0;
        S2: detect_o <= 1'b1;
        default: detect_o <= 1'b0;
      endcase
  end
  
endmodule
